{"version":3,"sources":["scripts/constants.js","scripts/helpers.js","scripts/main.js"],"names":["size","clearField","winNum","rotateField","tabel","rotatedField","c","row","push","checkPossibleMoves","field","possibleMoves","r","length","center","Up","Down","Left","Right","includes","convertSwipeToArrow","touches","difX","end","X","start","difY","Y","Math","abs","directionY","directionX","board","document","querySelector","messageStart","messageWin","messageLose","buttonStart","buttonRestart","scoreboard","bestScoreboard","score","localStorage","bestScore","isPlaying","JSON","parse","isWon","isLose","filterZeros","nums","filter","num","getRandomIdex","floor","random","probabilityOf4","setGame","value","styleColor","insertAdjacentHTML","startGame","classList","add","updateBoard","addNum","innerText","innerHTML","remove","addEventListener","e","stringify","updateScore","move","code","arrow","slideRows","rotated","slided","checkWin","checkLose","workField","map","slide","reverse","i","startFill","fill","id","cell","getElementById","className","foundZeroCell","numToAdd","forEach","find","updateBestScore","newScore","clientX","clientY","preventDefault"],"mappings":"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","file":"main.13028272.js","sourceRoot":"../src","sourcesContent":["export const size = 4;\nexport const clearField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nexport const winNum = 2048;\n","export function rotateField(tabel, size) {\n  const rotatedField = [];\n\n  for (let c = 0; c < size; c++) {\n    const row = [tabel[0][c], tabel[1][c], tabel[2][c], tabel[3][c]];\n    rotatedField.push(row);\n  }\n\n  return rotatedField;\n};\n\nexport function checkPossibleMoves(field, size) {\n  let possibleMoves = [];\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (possibleMoves.length === 4) {\n        break;\n      }\n\n      const center = field[r][c];\n\n      if (center) {\n        const Up = (r > 0) ? field[r - 1][c] : null;\n        const Down = (r < size - 1) ? field[r + 1][c] : null;\n        const Left = (c > 0) ? field[r][c - 1] : null;\n        const Right = (c < size - 1) ? field[r][c + 1] : null;\n\n        if (Left === 0 || Left === center) {\n          !possibleMoves.includes('ArrowLeft') && possibleMoves.push('ArrowLeft');\n        }\n\n        if (Right === 0 || Right === center) {\n          !possibleMoves.includes('ArrowRight') && possibleMoves.push('ArrowRight');\n        }\n\n        if (Up === 0 || Up === center) {\n          !possibleMoves.includes('ArrowUp') && possibleMoves.push('ArrowUp');\n        }\n\n        if (Down === 0 || Down === center) {\n          !possibleMoves.includes('ArrowDown') && possibleMoves.push('ArrowDown');\n        }\n      }\n    }\n  }\n\n  return possibleMoves;\n}\n\nexport function convertSwipeToArrow(touches) {\n  const difX = touches.end.X - touches.start.X;\n  const difY = touches.end.Y - touches.start.Y;\n\n  if (Math.abs(difX + difY) < 50) { // check for long enough swipe\n    return;\n  }\n\n  const directionY = difY < 0 ? 'ArrowUp' : 'ArrowDown';\n  const directionX = difX < 0 ? 'ArrowLeft' : 'ArrowRight';\n\n  return (Math.abs(difY) > Math.abs(difX)) ? directionY : directionX;\n}\n","'use strict';\n\nimport { size, clearField, winNum } from \"./constants\";\nimport { rotateField } from \"./helpers\";\nimport { checkPossibleMoves } from \"./helpers\";\nimport { convertSwipeToArrow } from \"./helpers\";\n\nconst board = document.querySelector('.game-field');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst buttonStart = document.querySelector('.start');\nconst buttonRestart = document.querySelector('.restart');\nconst scoreboard = document.querySelector('.game-score');\nconst bestScoreboard = document.querySelector('.game-best-score');\nlet score = +localStorage.score || 0;\nlet bestScore = +localStorage.bestScore || 0;\nlet isPlaying = localStorage.isPlaying;\n\nlet field = isPlaying\n  ? JSON.parse(localStorage.field)\n  : clearField;\n\nlet isWon = false;\nlet isLose = false;\nlet possibleMoves = [];\n\nconst filterZeros = (nums) => nums.filter(num => num !== 0);\nconst getRandomIdex = () => Math.floor(Math.random() * size);\nconst probabilityOf4 = () => Math.floor(Math.random() * 10); // 1/10 = 10%\n\nfunction setGame() {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      const value = field[r][c] || '';\n      const styleColor = value > 0 ? `field-cell--${value}` : '';\n\n      board.insertAdjacentHTML('beforeend', `\n      <div\n        class=\"field-cell ${styleColor}\"\n        id=\"${r}-${c}\"\n      >\n        ${value}\n      </div>\n    `)\n    }\n  }\n}\n\nsetGame();\n\nif (isPlaying) {\n  scoreboard.innerText = score;\n  bestScoreboard.innerHTML = bestScore;\n  buttonStart.classList.add('hidden');\n  buttonRestart.classList.remove('hidden');\n  startGame();\n}\n\nfunction startGame() {\n  if (isPlaying) {\n    messageStart.classList.add('hidden');\n    possibleMoves = checkPossibleMoves(field, size);\n    updateBoard();\n\n    return;\n  }\n\n  messageStart.classList.add('hidden');\n  addNum();\n  addNum();\n  updateBoard();\n  possibleMoves = checkPossibleMoves(field, size);\n}\n\nbuttonStart.addEventListener('click', (e) => {\n  localStorage.isPlaying = true;\n  buttonStart.classList.add('hidden');\n  buttonRestart.classList.remove('hidden');\n\n  startGame();\n})\n\nbuttonRestart.addEventListener('click', (e) => {\n  localStorage.field = JSON.stringify(clearField);\n  field = JSON.parse(localStorage.field);\n  localStorage.isPlaying = false;\n  isPlaying = localStorage.isPlaying;\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  updateScore(null);\n  addNum();\n  addNum();\n  startGame();\n})\n\ndocument.addEventListener('keyup', (e) => {\n  move(e.code);\n})\n\nconst touches = {\n  start: {\n    X: 0,\n    Y: 0,\n  },\n  end: {\n    X: 0,\n    Y: 0,\n  },\n};\n\nboard.addEventListener('touchstart', e => {\n  touches.start.X = Math.abs(e.touches[0].clientX);\n  touches.start.Y = Math.abs(e.touches[0].clientY);\n})\n\nboard.addEventListener('touchmove', e => {\n  e.preventDefault()\n  touches.end.X = Math.abs(e.touches[0].clientX);\n  touches.end.Y = Math.abs(e.touches[0].clientY);\n})\n\nboard.addEventListener('touchend', e => {\n  move(convertSwipeToArrow(touches));\n})\n\nfunction move(arrow) {\n  if (!possibleMoves.includes(arrow)) {\n    return;\n  }\n\n  switch (arrow) {\n    case 'ArrowLeft':\n    case 'ArrowRight':\n      field = slideRows(arrow, field);\n      break;\n\n    case 'ArrowUp':\n    case 'ArrowDown':\n      const rotated = rotateField(field, size);\n      const slided = slideRows(arrow, rotated);\n\n      field = rotateField(slided, size);\n      break;\n  }\n\n  addNum();\n  checkWin();\n  possibleMoves = checkPossibleMoves(field, size);\n  checkLose();\n  updateBoard();\n}\n\nfunction slideRows(arrow, field) {\n  const workField = field.map(row => [...row]);\n\n  for (let r = 0; r < size; r++) {\n    let row = workField[r];\n\n    if (arrow === 'ArrowRight' || arrow === 'ArrowDown') {\n      row = row.reverse();\n      row = slide(row);\n      row = row.reverse();\n    } else {\n      row = slide(row);\n    }\n\n    workField[r] = row;\n  }\n\n  return workField;\n}\n\nfunction slide(row) {\n  row = filterZeros(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      updateScore(row[i]);\n    }\n  }\n\n  row = filterZeros(row);\n\n  const startFill = row.length;\n  row.length = size;\n  row = row.fill(0, startFill, size);\n\n  return row;\n}\n\nfunction updateBoard() {\n  localStorage.field = JSON.stringify(field);\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      const value = field[r][c];\n      const id = `${r}-${c}`;\n      const cell = document.getElementById(id);\n\n      cell.innerText = '';\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.innerText = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n}\n\nfunction addNum() {\n  let foundZeroCell = false;\n  let numToAdd = (probabilityOf4() === 4) ? 4 : 2;\n\n  while (!foundZeroCell) {\n    const r = getRandomIdex();\n    const c = getRandomIdex();\n\n    if (field[r][c] === 0) {\n      field[r][c] = numToAdd;\n      foundZeroCell = true;\n    }\n  }\n}\n\nfunction checkWin() {\n  field.forEach(row => {\n    if (row.find(num => num === winNum)) {\n      messageWin.classList.remove('hidden');\n      isWon = true;\n    }\n  });\n}\n\nfunction checkLose() {\n  if (possibleMoves.length === 0) {\n    messageLose.classList.remove('hidden');\n    isLose = true;\n    return;\n  }\n}\n\nfunction updateScore(value) {\n  if (value === null) {\n    score = 0;\n    localStorage.score = score;\n  } else {\n    score += value;\n    localStorage.score = score;\n\n    if (score > bestScore) {\n      updateBestScore(score);\n    }\n  }\n\n  scoreboard.innerText = score;\n}\n\nfunction updateBestScore(newScore) {\n  bestScore = newScore;\n  localStorage.bestScore = newScore;\n  bestScoreboard.innerHTML = bestScore;\n}\n"]}